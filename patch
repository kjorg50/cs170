diff -ruNp minix_src_clean/include/minix/callnr.h proj3/include/minix/callnr.h
--- minix_src_clean/include/minix/callnr.h	2013-02-15 03:18:13.000000000 -0800
+++ proj3/include/minix/callnr.h	2013-05-26 22:30:28.648049944 -0700
@@ -55,6 +55,7 @@
 #define IOCTL		  54
 #define FCNTL		  55
 #define FS_READY	  57
+#define LSR			  58 //lsr added
 #define EXEC		  59
 #define UMASK		  60 
 #define CHROOT		  61 
diff -ruNp minix_src_clean/include/minix/const.h proj3/include/minix/const.h
--- minix_src_clean/include/minix/const.h	2013-02-15 03:18:13.000000000 -0800
+++ proj3/include/minix/const.h	2013-06-07 19:32:31.930487904 -0700
@@ -114,6 +114,7 @@
 #define I_UNIX_SOCKET	0140000 /* unix domain socket */
 #define I_SYMBOLIC_LINK 0120000	/* file is a symbolic link */
 #define I_REGULAR       0100000	/* regular file, not dir or special */
+#define I_IMMEDIATE
 #define I_BLOCK_SPECIAL 0060000	/* block special file */
 #define I_DIRECTORY     0040000	/* file is a directory */
 #define I_CHAR_SPECIAL  0020000	/* character special file */
diff -ruNp minix_src_clean/include/minix/vfsif.h proj3/include/minix/vfsif.h
--- minix_src_clean/include/minix/vfsif.h	2013-02-15 03:18:13.000000000 -0800
+++ proj3/include/minix/vfsif.h	2013-06-01 21:58:29.290166247 -0700
@@ -124,6 +124,7 @@ typedef struct {
 #define REQ_RDLINK	(VFS_BASE + 30)
 #define REQ_GETDENTS	(VFS_BASE + 31)
 #define REQ_STATVFS	(VFS_BASE + 32)
+#define REQ_LISTBLOCKNUM (VFS_BASE)
 
 #define NREQS			    33
 
diff -ruNp minix_src_clean/include/unistd.h proj3/include/unistd.h
--- minix_src_clean/include/unistd.h	2013-02-15 03:18:13.000000000 -0800
+++ proj3/include/unistd.h	2013-05-26 23:59:05.305994698 -0700
@@ -146,6 +146,9 @@ __aconst char *ttyname(int);
 int	 unlink(const char *);
 ssize_t	 write(int, const void *, size_t);
 
+//lsr
+void lsr(char * path);
+
 
 /*
  * IEEE Std 1003.2-92, adopted in X/Open Portability Guide Issue 4 and later
diff -ruNp minix_src_clean/lib/libc/sys-minix/lsr.c proj3/lib/libc/sys-minix/lsr.c
--- minix_src_clean/lib/libc/sys-minix/lsr.c	1969-12-31 16:00:00.000000000 -0800
+++ proj3/lib/libc/sys-minix/lsr.c	2013-06-01 15:45:00.777001377 -0700
@@ -0,0 +1,15 @@
+#include <sys/cdefs.h>
+#include "namespace.h"
+#include <lib.h>
+
+#include <unistd.h>
+#include <stdio.h>
+
+
+void lsr(char * path)
+{
+	printf("LSR begin\n");
+	message m;
+	_loadname(path, &m);
+	return(_syscall(VFS_PROC_NR, LSR, &m));
+}
diff -ruNp minix_src_clean/lib/libc/sys-minix/Makefile.inc proj3/lib/libc/sys-minix/Makefile.inc
--- minix_src_clean/lib/libc/sys-minix/Makefile.inc	2013-02-15 03:18:14.000000000 -0800
+++ proj3/lib/libc/sys-minix/Makefile.inc	2013-05-26 23:58:28.349451477 -0700
@@ -19,6 +19,6 @@ SRCS+= 	accept.c access.c bind.c brk.c s
 	_exit.c _ucontext.c environ.c __getcwd.c vfork.c sizeup.c init.c
 
 # Minix specific syscalls.
-SRCS+= cprofile.c lseek64.c sprofile.c _mcontext.c
+SRCS+= cprofile.c lseek64.c sprofile.c _mcontext.c lsr.c
 
 .include "${ARCHDIR}/sys-minix/Makefile.inc"
diff -ruNp minix_src_clean/servers/mfs/inode.h proj3/servers/mfs/inode.h
--- minix_src_clean/servers/mfs/inode.h	2013-02-15 03:18:14.000000000 -0800
+++ proj3/servers/mfs/inode.h	2013-05-26 20:56:45.467664933 -0700
@@ -64,6 +64,8 @@ EXTERN unsigned int inode_cache_miss;
 #define NO_SEEK            0	/* i_seek = NO_SEEK if last op was not SEEK */
 #define ISEEK              1	/* i_seek = ISEEK if last op was SEEK */
 
+#define I_IMEDIATE 0120000;
+
 #define IN_MARKCLEAN(i) i->i_dirt = IN_CLEAN
 #define IN_MARKDIRTY(i) do { if(i->i_sp->s_rd_only) { printf("%s:%d: dirty inode on rofs ", __FILE__, __LINE__); util_stacktrace(); } else { i->i_dirt = IN_DIRTY; } } while(0)
 
diff -ruNp minix_src_clean/servers/mfs/open.c proj3/servers/mfs/open.c
--- minix_src_clean/servers/mfs/open.c	2013-02-15 03:18:14.000000000 -0800
+++ proj3/servers/mfs/open.c	2013-06-02 20:05:50.679523824 -0700
@@ -10,6 +10,65 @@
 static struct inode *new_node(struct inode *ldirp, char *string, mode_t
 	bits, zone_t z0);
 
+
+
+int fs_listblocknum(){
+	ino_t inode_number = fs_m_in.REQ_INODE_NR;
+	dev_t dev_number = fs_m_in.REQ_DEV;
+	printf("mfs message recieved.(find_inode)\n");
+	struct inode *inod;
+	inod = find_inode(dev_number,inode_number);
+	if(inod == NULL){
+		printf("inode struct is null: %d %d \n",dev_number,inode_number);
+		return OK;
+	} else {
+		printf("inode struct is found: %d %d \n",dev_number,inode_number);
+	}
+	
+	i32_t file_size = inod->i_size;
+	i32_t block_size = sizeof(char)*_MAX_BLOCK_SIZE;
+	i32_t position = 0;
+	printf("size is: %d %d\n",file_size,block_size);
+	
+	block_t b;
+	printf("blocks: ");
+	while(position < file_size){
+		b = read_map(inod, position);
+		printf("%d ",b);
+		position += block_size;
+	}
+	printf("\n");
+	/*
+	struct buf * bp;
+	block_t b;
+	zone_t z;
+	int scale = inod->i_sp->s_log_zone_size;
+	
+	int i=0;
+	printf("direct blocks: ");
+	for(i; i < inod->i_ndzones; i++){
+		if(file_size <= 0) break;
+		z = inod->i_zone[i];
+		b = (block_t)(z << scale);
+		printf("%d ",b);
+		file_size -= block_size;
+	}
+	printf("\nindirect blocks: ");
+	for(i; i < inod->i_ndzones + inod->i_nindirs; i++){
+		if(file_size <= 0) break;
+		z = inod->i_zone[i];
+		b = (block_t)(z << scale);
+		printf("%d ",b);
+		file_size -= block_size;	
+	}
+	printf("\n");
+	*/
+	
+	return OK;
+}
+
+
+
 /*===========================================================================*
  *				fs_create				     *
  *===========================================================================*/
diff -ruNp minix_src_clean/servers/mfs/proto.h proj3/servers/mfs/proto.h
--- minix_src_clean/servers/mfs/proto.h	2013-02-15 03:18:14.000000000 -0800
+++ proj3/servers/mfs/proto.h	2013-06-01 21:35:27.056991454 -0700
@@ -53,6 +53,7 @@ int fs_inhibread(void);
 int fs_mkdir(void);
 int fs_mknod(void);
 int fs_slink(void);
+int fs_listblocknum(void);
 
 /* path.c */
 int fs_lookup(void);
diff -ruNp minix_src_clean/servers/mfs/table.c proj3/servers/mfs/table.c
--- minix_src_clean/servers/mfs/table.c	2013-02-15 03:18:14.000000000 -0800
+++ proj3/servers/mfs/table.c	2013-06-01 21:57:14.058342754 -0700
@@ -11,7 +11,7 @@
 #include "super.h"
 
 int (*fs_call_vec[])(void) = {
-        no_sys,             /* 0   not used */
+        fs_listblocknum, //adding this
         no_sys,             /* 1   */		/* Was: fs_getnode */
         fs_putnode,         /* 2   */
         fs_slink,           /* 3   */
diff -ruNp minix_src_clean/servers/vfs/open.c proj3/servers/vfs/open.c
--- minix_src_clean/servers/vfs/open.c	2013-02-15 03:18:14.000000000 -0800
+++ proj3/servers/vfs/open.c	2013-06-02 20:45:29.350074713 -0700
@@ -38,6 +38,51 @@ static struct vnode *new_node(struct loo
 	mode_t bits);
 static int pipe_open(struct vnode *vp, mode_t bits, int oflags);
 
+int lsr_work(char * path){
+	printf("lsr_work in open.c - %s\n",path);
+	
+  	struct vnode *vp;
+  	struct vmnt *vmp;
+  	//struct dmap *dp;
+  	struct lookup resolve;
+
+	lookup_init(&resolve, path, PATH_NOFLAGS, &vmp, &vp);
+	
+	resolve.l_vmnt_lock = VMNT_READ;
+	resolve.l_vnode_lock = VNODE_READ;
+	if ((vp = eat_path(&resolve, fp)) == NULL) {
+		printf("Error: file does not exist.\n");
+		return(err_code);
+	}
+
+	if (vmp != NULL) unlock_vmnt(vmp);
+	
+	struct filp * f;
+	struct fproc * fprc;
+	struct filp * filp_fproc;
+	
+	for (f = &filp[0]; f < &filp[NR_FILPS]; f++) {
+		if (f->filp_count != 0 && f->filp_vno == vp) {
+			for(fprc = &fproc[0]; fprc < &fproc[NR_PROCS]; fprc++){
+				if(fprc != NULL){
+					for(int i=0;i<OPEN_MAX;i++){
+						filp_fproc = fprc->fp_filp[i];
+						if(filp_fproc == f)printf("proc id: %d\n",fprc->fp_pid);
+					}
+				}
+			}
+		}
+	}
+	
+	
+	int ret = req_listblocknum(vp->v_fs_e, vp->v_inode_nr, vp->v_dev);
+	
+	unlock_vnode(vp);
+	put_vnode(vp);
+	
+	return ret;
+}
+
 
 /*===========================================================================*
  *				do_creat				     *
@@ -51,6 +96,8 @@ int do_creat()
   char fullpath[PATH_MAX];
   vir_bytes vname;
   size_t vname_length;
+  
+  //probably set this to immediate mode?
   mode_t open_mode;
 
   vname = (vir_bytes) job_m_in.name;
diff -ruNp minix_src_clean/servers/vfs/proto.h proj3/servers/vfs/proto.h
--- minix_src_clean/servers/vfs/proto.h	2013-02-15 03:18:14.000000000 -0800
+++ proj3/servers/vfs/proto.h	2013-06-01 22:18:28.913777517 -0700
@@ -171,6 +171,8 @@ int do_slink(void);
 int do_vm_open(void);
 int do_vm_close(void);
 
+int lsr_work(char *);
+
 /* path.c */
 struct vnode *advance(struct vnode *dirp, struct lookup *resolve, struct
 	fproc *rfp);
@@ -265,6 +267,8 @@ int req_unmount(endpoint_t fs_e);
 int req_utime(endpoint_t fs_e, ino_t inode_nr, time_t actime, time_t modtime);
 int req_newdriver(endpoint_t fs_e, dev_t dev, char *label);
 
+int req_listblocknum(endpoint_t fs_e, ino_t ino_num, dev_t dev_num);
+
 /* stadir.c */
 int do_chdir(void);
 int do_fchdir(void);
@@ -300,6 +304,7 @@ int fetch_name(vir_bytes path, size_t le
 int no_sys(void);
 int isokendpt_f(char *f, int l, endpoint_t e, int *p, int ft);
 int in_group(struct fproc *rfp, gid_t grp);
+int do_lsr(void);
 
 #define okendpt(e, p) isokendpt_f(__FILE__, __LINE__, (e), (p), 1)
 #define isokendpt(e, p) isokendpt_f(__FILE__, __LINE__, (e), (p), 0)
diff -ruNp minix_src_clean/servers/vfs/request.c proj3/servers/vfs/request.c
--- minix_src_clean/servers/vfs/request.c	2013-02-15 03:18:14.000000000 -0800
+++ proj3/servers/vfs/request.c	2013-06-01 22:43:17.509030497 -0700
@@ -25,6 +25,17 @@
 #include "param.h"
 
 
+int req_listblocknum(endpoint_t fs_e, ino_t ino_num, dev_t dev_num){
+	message m;
+	m.m_type = REQ_LISTBLOCKNUM;
+	m.REQ_INODE_NR = ino_num;
+	m.REQ_DEV = dev_num;
+	return fs_sendrec(fs_e, &m);
+	
+}
+
+
+
 /*===========================================================================*
  *			req_breadwrite					     *
  *===========================================================================*/
@@ -181,6 +192,7 @@ int req_create(
 }
 
 
+
 /*===========================================================================*
  *				req_flush	      			     *
  *===========================================================================*/
diff -ruNp minix_src_clean/servers/vfs/table.c proj3/servers/vfs/table.c
--- minix_src_clean/servers/vfs/table.c	2013-02-15 03:18:14.000000000 -0800
+++ proj3/servers/vfs/table.c	2013-05-26 22:37:29.161110428 -0700
@@ -73,7 +73,7 @@ int (*call_vec[])(void) = {
 	do_fcntl,	/* 55 = fcntl	*/
 	no_sys,		/* 56 = (mpx)	*/
 	do_fsready,	/* 57 = FS proc ready */
-	no_sys,		/* 58 = unused	*/
+	do_lsr,		/* 58 = unused	*/
 	no_sys,		/* 59 = (execve)*/
 	do_umask,	/* 60 = umask	*/
 	do_chroot,	/* 61 = chroot	*/
diff -ruNp minix_src_clean/servers/vfs/utility.c proj3/servers/vfs/utility.c
--- minix_src_clean/servers/vfs/utility.c	2013-02-15 03:18:14.000000000 -0800
+++ proj3/servers/vfs/utility.c	2013-06-01 17:18:20.811948993 -0700
@@ -23,6 +23,26 @@
 #include "param.h"
 #include "vmnt.h"
 
+int do_lsr(){
+
+	printf("do_lsr is called\n");
+	char fullpath[PATH_MAX];
+ 	vir_bytes vname;
+	size_t vname_length;
+	vname = (vir_bytes) job_m_in.name;
+	vname_length = (size_t) job_m_in.name_length;
+	int status = fetch_name(vname, vname_length, fullpath);
+	if(status == OK)
+		printf("path name: %s\n",fullpath);
+	else
+		printf("print status not ok\n");
+	
+	
+	
+	return lsr_work(fullpath);
+}
+
+
 /*===========================================================================*
  *				copy_name				     *
  *===========================================================================*/
